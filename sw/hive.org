* Hive Commands

  Create the table with user, timestamp, country:

  insert overwrite table userPhotoLoc
  select owner, date_taken, split(place_url,'/')[1] from photo p join share.place q on p.place_id=q.place_id and owner='37996594299@N01' sort by date_taken asc;

  create table userPhotoLoc (user STRING, taken TIMESTAMP, country STRING) ROW FORMAT
  DELIMITED FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' STORED AS TEXTFILE LOCATION '/user/rsiv5112/hiveData/userPhotoLoc';

  hadoop jar /usr/lib/hadoop-mapreduce/hadoop-streaming.jar -D mapred.map.tasks=1 -file ~/mapper.py -mapper ~/mapper.py -file ~/reducer.py -reducer ~/reducer.py -input place.txt -output test



create table owner_stay (owner string, output string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n'
STORED AS TEXTFILE LOCATION '/user/rsiv5112/hiveData/owner_stay';

#+begin_src sql :hql_create
  create external table if not exists rsiv5112.photos1
  (photoid string, owner string, tags string, datetaken timestamp, placeid string, accuracy string)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n'
  LOCATION '/user/rsiv5112/data1';

  create external table if not exists rsiv5112.photos2
  (photoid string, owner string, tags string, datetaken timestamp, placeid string, accuracy string)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n'
  LOCATION '/user/rsiv5112/data2';

  create external table if not exists rsiv5112.photos5
  (photoid string, owner string, tags string, datetaken timestamp, placeid string, accuracy string)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n'
  LOCATION '/user/rsiv5112/data5';

  create external table if not exists rsiv5112.photos7
  (photoid string, owner string, tags string, datetaken timestamp, placeid string, accuracy string)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n'
  LOCATION '/user/rsiv5112/data7';

  create external table if not exists rsiv5112.photos12
  (photoid string, owner string, tags string, datetaken timestamp, placeid string, accuracy string)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n'
  LOCATION '/share/large';
#+end_src


#+begin_src sql :hql
  add file identity_mapper.py;
  add file reducer.py;

  create external table if not exists rsiv5112.photos_tmp
  (photoid string, owner string, tags string, datetaken timestamp, placeid string, accuracy string)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n'
  LOCATION ${hiveconf:dbtable};

  from (
  from
  (select owner, datetaken, split(place_url,'/')[1] as country from rsiv5112.filtered_photos p join share.place q on p.placeid=q.place_id) country_data
  select transform(owner, datetaken, country) using 'python identity_mapper.py'
  as (owner, date_taken, country) distribute by owner sort by owner, date_taken asc
  ) owner_info
  INSERT OVERWRITE TABLE rsiv5112.owner_stay
  select transform(owner_info.owner, owner_info.date_taken, owner_info.country)
  using 'python reducer.py' as (owner, output);

  drop table rsiv5112.photos_tmp;
  drop table rsiv5112.filtered_photos;
#+end_src


#+begin_src python :reducer
  #!/usr/bin/env python

  import sys
  import time
  import datetime



  def display_user(user, stay_info):
      str_list = []
      for country_name, stay_list in stay_info.iteritems():
          str_list.append("{0}({1},{2:.1f},{3:.1f},{4:.1f},{5:.1f})".format(country_name, len(stay_list), max(stay_list), min(stay_list), sum(stay_list)/len(stay_list), sum(stay_list)))
      print("{0}\t{1}".format(user, ",".join(sorted(str_list))))

  # input comes from STDIN (standard input)

  current_country = ""
  current_owner = ""
  start_time = datetime.datetime.fromtimestamp(0)
  end_time = datetime.datetime.fromtimestamp(0)

  country_stay = {}

  for line in sys.stdin:
      # remove leading and trailing whitespace
      line = line.strip()
      # split the line into words
      owner, taken_str, country = line.split('\t')

      # change timestamp in string to time
      try:
          taken = datetime.datetime.strptime(taken_str, "%Y-%m-%d %H:%M:%S")
      except:
          continue

      if (owner != current_owner) and (current_owner != ""):
          stay_list = country_stay.get(current_country, [])
          stay_list.append((end_time - start_time).total_seconds()/(24*3600))
          country_stay[current_country] = stay_list
          display_user(current_owner, country_stay)
          country_stay = {}
          current_owner = owner
          current_country = country
          start_time = taken
          end_time = taken
      elif (owner == current_owner) and (country == current_country):
          end_time = taken
      elif (owner == current_owner) and (country != current_country):
          stay_list = country_stay.get(current_country, [])
          stay_list.append((taken - start_time).total_seconds()/(24*3600))
          country_stay[current_country] = stay_list
          current_country = country
          start_time = taken
          end_time = taken
      elif (current_owner == ""):
          current_owner = owner
          current_country = country
          start_time = taken
          end_time = taken

  # Final Entry
  stay_list = country_stay.get(current_country, [])
  stay_list.append((taken - start_time).total_seconds()/(24*3600))
  country_stay[current_country] = stay_list
  display_user(current_owner, country_stay)

#+end_src



#+begin_src sql :mapper
  #!/usr/bin/env python

  import sys

  for line in sys.stdin:
      line = line.strip()
      print line
#+end_src


#+begin_src python :reducer
  #!/usr/bin/env python

  import sys
  import time
  import datetime



  def display_user(user, stay_info):
      str_list = []
      for country_name, stay_list in stay_info.iteritems():
          str_list.append("{0}({1},{2:.1f},{3:.1f},{4:.1f},{5:.1f})".format(country_name, len(stay_list), max(stay_list), min(stay_list), sum(stay_list)/len(stay_list), sum(stay_list)))
      print("{0}\t{1}".format(user, ",".join(sorted(str_list))))

  # input comes from STDIN (standard input)

  current_country = ""
  current_owner = ""
  start_time = datetime.datetime.fromtimestamp(0)
  end_time = datetime.datetime.fromtimestamp(0)

  country_stay = {}

  for line in sys.stdin:
      # remove leading and trailing whitespace
      line = line.strip()
      # split the line into words
      owner, taken_str, country = line.split('\t')

      # change timestamp in string to time
      try:
          taken = datetime.datetime.strptime(taken_str, "%Y-%m-%d %H:%M:%S")
      except:
          continue

      if (owner != current_owner) and (current_owner != ""):
          stay_list = country_stay.get(current_country, [])
          stay_list.append((end_time - start_time).total_seconds()/(24*3600))
          country_stay[current_country] = stay_list
          display_user(current_owner, country_stay)
          country_stay = {}
          current_owner = owner
          current_country = country
          start_time = taken
          end_time = taken
      elif (owner == current_owner) and (country == current_country):
          end_time = taken
      elif (owner == current_owner) and (country != current_country):
          stay_list = country_stay.get(current_country, [])
          stay_list.append((taken - start_time).total_seconds()/(24*3600))
          country_stay[current_country] = stay_list
          current_country = country
          start_time = taken
          end_time = taken
      elif (current_owner == ""):
          current_owner = owner
          current_country = country
          start_time = taken
          end_time = taken

  # Final Entry
  stay_list = country_stay.get(current_country, [])
  stay_list.append((taken - start_time).total_seconds()/(24*3600))
  country_stay[current_country] = stay_list
  display_user(current_owner, country_stay)

#+end_src

#+begin_src python :test
  #!/usr/bin/env python

  import sys
  import time
  import datetime

  for line in sys.stdin:
      line = line.strip()
      if line != "":
          user, date, country = line.split('\t')
          print('{0}\t{1}\n'.format(user,country))
      else:
          break

#+end_src


#+begin_src python :spark
  from __future__ import division
  from pyspark import SparkContext
  from operator import itemgetter
  import datetime
  import time
  import sys

  def extract_photos_info(line):
      (ign, owner, ign, date_taken, location_id, ign) = line.split('\t')
      return ((owner, date_taken), location_id)

  def extract_place_info(line):
       (location_id, ign, ign, ign, ign, ign, country) = line.split('\t')
       return (location_id, country.split('/')[1])

  def user_stay_info(info):
      sorted_info = sorted(info[1], key=lambda x: x[0])
      current_country = ""
      current_owner = info[0]
      start_time = datetime.datetime.fromtimestamp(0)
      end_time = datetime.datetime.fromtimestamp(0)
      output = []
      for elem in sorted_info:
          # split the line into words
          owner = info[0]
          taken_str, country = elem

          # change timestamp in string to time
          try:
              taken = datetime.datetime.strptime(taken_str, "%Y-%m-%d %H:%M:%S")
          except:
              continue

          if (country == current_country):
              end_time = taken
          elif (country != current_country):
              if (current_country != ""):
                  output.append(((current_owner, current_country),((taken - start_time).total_seconds()/(24*3600))))
              current_country = country
              start_time = taken
              end_time = taken

      output.append(((current_owner, current_country), ((end_time - start_time).total_seconds()/(24*3600))))

      return output

  def convert_user_stay_to_str(info):
      user = info[0][0]
      country = info[0][1]
      stay_info = info[1]

      return (user.encode('utf-8'), "{0}({1},{2:.1f},{3:.1f},{4:.1f},{5:.1f})".format(country.encode('utf-8'), len(stay_info), max(stay_info), min(stay_info), sum(stay_info)/len(stay_info), sum(stay_info)))

  def extractUserPhotos(record):
      try:
          return (record)
      except:
          return()

  def filter_redundant_photos(lines):
      output = []
      for line in lines:
          (ign, owner, ign, date_taken, location_id, ign) = line.split('\t')
          output.append(((owner, date_taken), location_id))

      sort_info = sorted(output, key=lambda x: x[0])
      current_loc = sort_info[0][1]
      current_owner = sort_info[0][0][0]
      start_time = sort_info[0][0][1]
      end_time = sort_info[0][0][1]
      for line in sort_info:
          owner = line[0][0]
          taken_str = line[0][1]
          loc = line[1]

          # change timestamp in string to time
          try:
              taken = taken_str
          except:
              continue

          if (owner != current_owner):
              print((current_loc, (current_owner, start_time)))
              yield((current_loc, (current_owner, start_time)))
              yield((current_loc, (current_owner, end_time)))
              current_owner = owner
              current_loc = loc
              start_time = taken
              end_time = taken
          elif (owner == current_owner) and (current_loc != loc):
              print((current_loc, (current_owner, start_time)))
              yield((current_loc, (current_owner, start_time)))
              yield((current_loc, (current_owner, end_time)))
              current_owner = owner
              current_loc = loc
              start_time = taken
              end_time = taken
          elif (owner == current_owner) and (current_loc == loc):
              end_time = taken
      yield((current_loc, (current_owner, start_time)))
      yield((current_loc, (current_owner, end_time)))

  if __name__ == "__main__":
      sc = SparkContext(appName="Country visits per user")
      if len(sys.argv) > 1:
          photos = sc.textFile(sys.argv[1])
      place = sc.textFile("/share/place.txt")

      # Returns location_id -> (owner, date_taken)
      photos_info = photos.mapPartitions(filter_redundant_photos)

      # Returns location_id -> (country)
      place_info = place.map(extract_place_info)

      # Join (location_id -> ((owner, date_taken), country))
      photo_with_country = photos_info.join(place_info)

      # (owner) -> (date_taken, country)
      user_country_details = photo_with_country.map(lambda x: (x[1][0][0], (x[1][0][1], x[1][1]))).groupByKey()

      # sorted users
      time_sorted_user_photos = user_country_details.flatMap(user_stay_info).groupByKey()
      user_country_sorted = time_sorted_user_photos.sortByKey()
      user_stay_details = user_country_sorted.map(convert_user_stay_to_str).groupByKey()

      user_stay_details.map(lambda x: "{0}\t{1}".format(x[0], ','.join(x[1]))).saveAsTextFile("prelimuser")

#+end_src


30703260@N08	Algeria(2,4.9,0.0,2.4,4.9),Argentina(8,8.0,0.0,1.7,13.7),Armenia(1,5.0,5.0,5.0,5.0),Australia(9,13.2,0.0,2.1,19.1),Austria(41,14.1,0.0,1.7,69.5),Azerbaijan(1,0.0,0.0,0.0,0.0),Bangladesh(1,2.1,2.1,2.1,2.1),Barbados(1,3.0,3.0,3.0,3.0),Bhutan(4,3.2,0.0,0.8,3.2),Botswana(2,0.1,0.0,0.0,0.1),Brazil(14,15.2,0.0,1.6,22.5),Cambodia(1,1.1,1.1,1.1,1.1),Cameroon(7,3.9,0.0,0.7,5.1),Central African Republic(1,0.0,0.0,0.0,0.0),China(23,26.7,0.0,2.1,49.4),Colombia(1,0.8,0.8,0.8,0.8),Congo(1,2.9,2.9,2.9,2.9),Costa+Rica(19,4.3,0.0,1.0,18.3),Croatia(13,10.9,0.0,1.7,21.9),Cuba(1,0.7,0.7,0.7,0.7),Cyprus(3,8.0,0.0,2.9,8.8),Czech Republic(1,0.9,0.9,0.9,0.9),Czech+Republic(2,1.9,0.9,1.4,2.8),Democratic Republic of Congo(1,0.2,0.2,0.2,0.2),Democratic+Republic+of+Congo(6,54.8,0.0,9.5,56.9),Denmark(3,0.9,0.0,0.5,1.6),Dominican+Republic(15,8.0,0.0,3.0,45.1),Egypt(1,0.7,0.7,0.7,0.7),Europe(1,0.0,0.0,0.0,0.0),Finland(1,0.7,0.7,0.7,0.7),France(30,4.9,0.0,0.7,22.3),Germany(287,105.0,0.0,2.8,814.4),Greece(11,6.6,0.0,0.9,10.1),Guatemala(2,8.1,0.0,4.1,8.1),Haiti(2,4.2,0.1,2.1,4.3),Hungary(3,0.7,0.0,0.3,1.0),India(19,5.2,0.0,0.8,14.5),Indonesia(175,359.7,0.0,3.7,645.4),Iran(11,2.9,0.0,0.5,6.0),Ireland(1,0.8,0.8,0.8,0.8),Italy(53,951.4,0.0,18.9,1002.0),Japan(1,0.0,0.0,0.0,0.0),Kazakhstan(7,2.2,0.0,0.8,5.6),Kenya(71,29.5,0.0,1.3,91.6),Madagascar(9,5.1,0.0,1.0,9.0),Malawi(4,3.9,0.0,1.4,5.7),Malaysia(33,17.1,0.0,1.2,39.5),Mexico(10,3.8,0.0,0.8,7.8),Mongolia(1,0.9,0.9,0.9,0.9),Montenegro(18,28.7,0.0,2.4,43.1),Morocco(16,4.0,0.0,0.7,10.8),Mozambique(1,2.0,2.0,2.0,2.0),Myanmar(2,0.0,0.0,0.0,0.0),Namibia(37,30.2,0.0,4.0,149.0),Nepaladd file identity_mapper.py;
(37,19.0,0.0,2.5,93.4),Netherlands(7,0.8,0.0,0.1,0.8),New+Caledonia(1,0.8,0.8,0.8,0.8),New+Zealand(2,1.1,0.0,0.5,1.1),North Korea(1,0.0,0.0,0.0,0.0),Pakistan(5,1.2,0.0,0.4,2.0),Panama(8,16.9,0.0,2.2,17.3),Papua New Guinea(37,5.9,0.0,0.7,25.0),Papua+New+Guinea(15,3.6,0.0,0.8,11.7),Paraguay(2,0.0,0.0,0.0,0.0),Peru(13,20.4,0.0,2.2,28.8),Philippines(69,32.2,0.0,2.8,191.7),Romania(1,0.6,0.6,0.6,0.6),Russia(3,7.0,0.0,2.4,7.1),Saint+Vincent+and+the+Grenadines(1,0.0,0.0,0.0,0.0),Samoa(1,0.0,0.0,0.0,0.0),Saudi+Arabia(1,0.0,0.0,0.0,0.0),Senegal(26,6.8,0.0,0.9,24.6),Singapore(1,0.6,0.6,0.6,0.6),Slovenia(1,0.9,0.9,0.9,0.9),Solomon Islands(5,3.1,0.0,1.6,8.0),South Africa(3,0.1,0.0,0.1,0.2),South+Africa(1,0.0,0.0,0.0,0.0),Spain(19,3.9,0.0,0.6,12.3),Sri Lanka(3,0.0,0.0,0.0,0.0),Sri+Lanka(9,6.8,0.0,1.6,14.0),Sweden(2,0.0,0.0,0.0,0.0),Switzerland(16,3.4,0.0,0.7,10.8),Taiwan(7,6.0,0.0,1.5,10.2),Tanzania(3,1.1,0.1,0.7,2.0),Thailand(34,8.7,0.0,1.3,43.1),The Gambia(1,0.0,0.0,0.0,0.0),The+Gambia(9,2.1,0.0,0.5,4.5),Tunisia(18,36.2,0.0,3.0,54.4),Turkey(50,4.1,0.0,0.5,27.0),Turkmenistan(2,21.8,0.4,11.1,22.2),Uganda(1,0.7,0.7,0.7,0.7),United Kingdom(16,1.8,0.0,0.6,10.3),United+Arab+Emirates(3,4.9,0.0,2.0,6.1),United+Kingdom(13,13.0,0.0,2.1,26.8),United+States(4,0.2,0.0,0.1,0.3),Vietnam(9,48.1,0.0,12.7,114.1),Zimbabwe(1,0.5,0.5,0.5,0.5)
28397336@N08	Spain(1,86.2,86.2,86.2,86.2),United+Kingdom(2,352.5,104.5,228.5,457.0)
25425610@N00	South+Korea(1,1566.2,1566.2,1566.2,1566.2)
69883003@N00	United+States(1,3565.6,3565.6,3565.6,3565.6)
50501691@N00	China(1,835.6,835.6,835.6,835.6)
77033407@N00	Israel(1,1978.5,1978.5,1978.5,1978.5)
29156415@N04	Poland(1,385.2,385.2,385.2,385.2)
7504153@N07	Spain(2,105.1,39.9,72.5,145.0),United+States(3,65.8,0.6,43.4,130.2)
94262282@N00	Costa+Rica(1,1.9,1.9,1.9,1.9),United+States(2,10585.6,696.4,5641.0,11282.0)
76809551@N00	Australia(1,838.2,838.2,838.2,838.2)
48929795@N00	Spain(12,24.1,0.0,4.4,53.1),United+Kingdom(13,1848.2,0.0,216.9,2819.4)
23933463@N00	Czech+Republic(4,610.0,18.0,201.9,807.5),France(1,36.2,36.2,36.2,36.2),Italy(3,591.0,11.0,211.1,633.2),Poland(1,8.2,8.2,8.2,8.2)
65062705@N00	Portugal(1,2112.7,2112.7,2112.7,2112.7)
10716620@N00	Slovakia(1,3.6,3.6,3.6,3.6),United+States(1,1048.0,1048.0,1048.0,1048.0)
28303378@N03	Australia(1,1012.9,1012.9,1012.9,1012.9)
44124395711@N01	Spain(1,34832.1,34832.1,34832.1,34832.1)
91094132@N00	United+States(1,437.1,437.1,437.1,437.1)
65252672@N00	Belgium(2,666.0,128.9,397.5,794.9),Italy(1,272.1,272.1,272.1,272.1)
15341463@N06	Canada(10,190.0,21.8,116.6,1166.3),Mexico(9,36.1,0.0,4.2,37.4)
16613114@N00	Aland+Islands(1,1.1,1.1,1.1,1.1),Finland(11,136.7,0.8,35.5,391.0),Germany(5,15.4,0.0,5.7,28.4),Italy(2,4.9,3.1,4.0,8.0),Luxembourg(6,18.9,0.0,3.6,21.8),Malta(1,27.0,27.0,27.0,27.0),Russia(6,62.3,1.8,31.2,187.4),Sweden(1,0.0,0.0,0.0,0.0),United+Kingdom(25,31611.6,0.0,1367.9,34196.3)
7729940@N06	Greece(4,559.0,0.0,145.4,581.5),Hungary(3,2.5,0.0,1.4,4.2),Poland(16,407.4,0.5,106.2,1699.6),Portugal(7,45.8,0.0,10.8,75.8),Slovakia(1,0.2,0.2,0.2,0.2),Spain(1,1.0,1.0,1.0,1.0),Tunisia(2,15.0,13.9,14.5,29.0),Turkey(5,10.4,0.0,5.7,28.5),Ukraine(1,18.2,18.2,18.2,18.2),United+Kingdom(1,1.1,1.1,1.1,1.1)
22514775@N06	United+States(1,82.8,82.8,82.8,82.8)
7699451@N07	Netherlands(4,265.7,0.9,74.3,297.2),United+States(4,697.9,0.4,174.9,699.8)
45769714@N00	United+Kingdom(4,1373.0,0.0,476.0,1904.0),United+States(4,48.2,0.0,12.0,48.2)
68226797@N00	United+States(1,174.6,174.6,174.6,174.6)
71523911@N00	Austria(1,48.8,48.8,48.8,48.8),Czech+Republic(3,159.1,0.5,54.2,162.7),Germany(1,24.2,24.2,24.2,24.2),Italy(6,526.8,0.9,206.9,1241.4)


Hive
NUmber of reducers 128:
1G =>
Stage 1:
   Map 15 seconds
   Reduce  57 seconds
   Shuffle 31 seconds
   Total 2 Mins 9 seconds
Stage 2:
   Map 20 seconds
   Shuffle
   Reduce 1 min 36 seconds

Stage-Stage-1: Map: 9  Reduce: 128   Cumulative CPU: 1465.61 sec   HDFS Read: 1237194753 HDFS Write: 494174852 SUCCESS
Stage-Stage-2: Map: 9  Reduce: 128   Cumulative CPU: 1042.36 sec   HDFS Read: 494207133 HDFS Write: 1303210 SUCCESS
