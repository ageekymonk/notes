* Random
** Paretto Principle
   80% of the outcomes with 20% effort
** Linux Namespaces
   1. UTS (Hostname)
      #+begin_src C
        #define _GNU_SOURCE
        #include <sys/types.h>
        #include <sys/wait.h>
        #include <stdio.h>
        #include <sched.h>
        #include <signal.h>
        #include <unistd.h>

        #define STACK_SIZE (1024 * 1024)

        static char child_stack[STACK_SIZE];
        char* const child_args[] = {
            "/bin/bash",
            NULL
        };

        int child_main(void* arg)
        {
          printf(" - World !\n");
          sethostname("In Namespace", 12);
          execv(child_args[0], child_args);
          printf("Ooops\n");
          return 1;
        }

        int main()
        {
          printf(" - Hello ?\n");
          int child_pid = clone(child_main, child_stack+STACK_SIZE,
              CLONE_NEWUTS | SIGCHLD, NULL);
          waitpid(child_pid, NULL, 0);
          return 0;
        }
      #+end_src
   2. IPC
      #+begin_src C
        #define _GNU_SOURCE
        #include <sys/types.h>
        #include <sys/wait.h>
        #include <stdio.h>
        #include <sched.h>
        #include <signal.h>
        #include <unistd.h>

        #define STACK_SIZE (1024 * 1024)

        // sync primitive
        int checkpoint[2];

        static char child_stack[STACK_SIZE];
        char* const child_args[] = {
          "/bin/bash",
          NULL
        };

        int child_main(void* arg)
        {
          char c;

          // init sync primitive
          close(checkpoint[1]);
          // wait...
          read(checkpoint[0], &c, 1);

          printf(" - World !\n");
          sethostname("In Namespace", 12);
          execv(child_args[0], child_args);
          printf("Ooops\n");
          return 1;
        }

        int main()
        {
          // init sync primitive
          pipe(checkpoint);

          printf(" - Hello ?\n");

          int child_pid = clone(child_main, child_stack+STACK_SIZE,
              CLONE_NEWUTS | CLONE_NEWIPC | SIGCHLD, NULL);

          // some damn long init job
          sleep(4);
          // signal "done"
          close(checkpoint[1]);

          waitpid(child_pid, NULL, 0);
          return 0;
        }
      #+end_src
   3. PID
      #+begin_src C
        #define _GNU_SOURCE
        #include <sys/types.h>
        #include <sys/wait.h>
        #include <stdio.h>
        #include <sched.h>
        #include <signal.h>
        #include <unistd.h>

        #define STACK_SIZE (1024 * 1024)

        // sync primitive
        int checkpoint[2];

        static char child_stack[STACK_SIZE];
        char* const child_args[] = {
          "/bin/bash",
          NULL
        };

        int child_main(void* arg)
        {
          char c;

          // init sync primitive
          close(checkpoint[1]);
          // wait...
          read(checkpoint[0], &c, 1);

          printf(" - [%5d] World !\n", getpid());
          sethostname("In Namespace", 12);
          execv(child_args[0], child_args);
          printf("Ooops\n");
          return 1;
        }

        int main()
        {
          // init sync primitive
          pipe(checkpoint);

          printf(" - [%5d] Hello ?\n", getpid());

          int child_pid = clone(child_main, child_stack+STACK_SIZE,
              CLONE_NEWUTS | CLONE_NEWIPC | CLONE_NEWPID | SIGCHLD, NULL);

          // further init here (nothing yet)

          // signal "done"
          close(checkpoint[1]);

          waitpid(child_pid, NULL, 0);
          return 0;
        }
      #+end_src
   4. NS (Mount Points)
      #+begin_src C
        #define _GNU_SOURCE
        #include <sys/types.h>
        #include <sys/wait.h>
        #include <sys/mount.h>
        #include <stdio.h>
        #include <sched.h>
        #include <signal.h>
        #include <unistd.h>

        #define STACK_SIZE (1024 * 1024)

        // sync primitive
        int checkpoint[2];

        static char child_stack[STACK_SIZE];
        char* const child_args[] = {
          "/bin/bash",
          NULL
        };

        int child_main(void* arg)
        {
          char c;

          // init sync primitive
          close(checkpoint[1]);

          // setup hostname
          printf(" - [%5d] World !\n", getpid());
          sethostname("In Namespace", 12);

          // remount "/proc" to get accurate "top" && "ps" output
          mount("proc", "/proc", "proc", 0, NULL);

          // wait...
          read(checkpoint[0], &c, 1);

          execv(child_args[0], child_args);
          printf("Ooops\n");
          return 1;
        }

        int main()
        {
          // init sync primitive
          pipe(checkpoint);

          printf(" - [%5d] Hello ?\n", getpid());

          int child_pid = clone(child_main, child_stack+STACK_SIZE,
              CLONE_NEWUTS | CLONE_NEWIPC | CLONE_NEWPID | CLONE_NEWNS | SIGCHLD, NULL);

          // further init here (nothing yet)

          // signal "done"
          close(checkpoint[1]);

          waitpid(child_pid, NULL, 0);
          return 0;
        }
      #+end_src
   5. NET
      #+begin_src C
        #define _GNU_SOURCE
        #include <sys/types.h>
        #include <sys/wait.h>
        #include <sys/mount.h>
        #include <stdio.h>
        #include <sched.h>
        #include <signal.h>
        #include <unistd.h>
        #include <stdlib.h>

        #define STACK_SIZE (1024 * 1024)

        // sync primitive
        int checkpoint[2];

        static char child_stack[STACK_SIZE];
        char* const child_args[] = {
          "/bin/bash",
          NULL
        };

        int child_main(void* arg)
        {
          char c;

          // init sync primitive
          close(checkpoint[1]);

          // setup hostname
          printf(" - [%5d] World !\n", getpid());
          sethostname("In Namespace", 12);

          // remount "/proc" to get accurate "top" && "ps" output
          mount("proc", "/proc", "proc", 0, NULL);

          // wait for network setup in parent
          read(checkpoint[0], &c, 1);

          // setup network
          system("ip link set lo up");
          system("ip link set veth1 up");
          system("ip addr add 169.254.1.2/30 dev veth1");

          execv(child_args[0], child_args);
          printf("Ooops\n");
          return 1;
        }

        int main()
        {
          // init sync primitive
          pipe(checkpoint);

          printf(" - [%5d] Hello ?\n", getpid());

          int child_pid = clone(child_main, child_stack+STACK_SIZE,
              CLONE_NEWUTS | CLONE_NEWIPC | CLONE_NEWPID | CLONE_NEWNS | CLONE_NEWNET | SIGCHLD, NULL);

          // further init: create a veth pair
          char* cmd;
          asprintf(&cmd, "ip link set veth1 netns %d", child_pid);
          system("ip link add veth0 type veth peer name veth1");
          system(cmd);
          system("ip link set veth0 up");
          system("ip addr add 169.254.1.1/30 dev veth0");
          free(cmd);

          // signal "done"
          close(checkpoint[1]);

          waitpid(child_pid, NULL, 0);
          return 0;
        }
      #+end_src
   6. USER
      https://blog.jtlebi.fr/2013/12/22/introduction-to-linux-namespaces-part-1-uts/
** DNS
   1. Root Server
   2. TLD
   3. Authoritative Servers
   4. Zones
   5. Zone File
   6. SOA Record - Start of Authority
      One per zone
   7. NS Record - Nameserver Record
   8. HOST A Record / AAAA Record
   9. CNAME Record
   10. MX Record
   11. SRV Record
   12. TXT Record
